services:
  backend-users:
    build:
      context: .
      dockerfile: ./backend/auth/Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - ./backend/auth/.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - go-mod:/go/pkg/mod
    networks:
        - app-network

  backend-sport:
    build:
      context: .
      dockerfile: ./backend/sport/Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./backend/sport/.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - go-mod:/go/pkg/mod
    networks:
        - app-network

  postgres:
    build: ./PostgreSQL
    container_name: my_postgres
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty123
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
        - app-network
  frontend:
    build:
      context: ./frontend
    depends_on:
      - backend-sport
    ports:
      - "81:80"
    volumes:
      - ./frontend:/usr/share/nginx/html   
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  go-mod:
  frontend: